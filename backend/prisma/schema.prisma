// datasource and generator
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

model Tenant {
    id                 String             @id @default(cuid())
    slug               String             @unique
    name               String
    email              String?
    phone              String?
    address            String?
    subscriptionTier   SubscriptionTier   @default(STARTER)
    subscriptionStatus SubscriptionStatus @default(ACTIVE)
    subscriptionStart  DateTime?
    subscriptionEnd    DateTime?
    maxLeads           Int                @default(500)
    maxTeamMembers     Int                @default(2)
    createdAt          DateTime           @default(now())
    updatedAt          DateTime           @updatedAt

    users                   User[]
    leads                   Lead[]
    forms                   Form[]
    payments                Payment[]
    applications            Application[]
    documents               Document[]
    communications          Communication[]
    auditLogs               AuditLog[]
    feeStructures           FeeStructure[]
    subscriptions           Subscription[]
    appointments            Appointment[]
    assets                  Asset[]
    callLogs                CallLog[]
    telecallerPerformance   TelecallerPerformance[]
    followUpReminders       FollowUpReminder[]
    emailTemplates          EmailTemplate[]
    emailQueues             EmailQueue[]
    notificationPreferences NotificationPreference[]
    Notification            Notification[]
}

enum SubscriptionTier {
    STARTER
    PRO
    MAX
}

enum SubscriptionStatus {
    ACTIVE
    INACTIVE
    SUSPENDED
    EXPIRED
}

model User {
    id           String    @id @default(cuid())
    tenantId     String
    email        String    @unique
    passwordHash String
    firstName    String?
    lastName     String?
    phone        String?
    role         Role
    isActive     Boolean   @default(true)
    lastLoginAt  DateTime?
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt

    tenant                  Tenant                   @relation(fields: [tenantId], references: [id])
    leadNotes               LeadNote[]
    assignedLeads           Lead[]                   @relation("LeadAssignee")
    refreshTokens           RefreshToken[]
    applications            Application[]            @relation("ApplicationAssignee")
    documents               Document[]               @relation("DocumentVerifier")
    communications          Communication[]          @relation("CommunicationSender")
    auditLogs               AuditLog[]               @relation("AuditLogUser")
    appointments            Appointment[]            @relation("AppointmentAssignee")
    performanceLogs         PerformanceLog[]
    assets                  Asset[]                  @relation("AssetUploader")
    callLogs                CallLog[]                @relation("CallLogTelecaller")
    telecallerPerformance   TelecallerPerformance[]  @relation("TelecallerPerformance")
    followUpReminders       FollowUpReminder[]       @relation("FollowUpReminderTelecaller")
    notificationPreferences NotificationPreference[] @relation("NotificationPreference")
    notifications           Notification[]           @relation("NotificationUser")
}

enum Role {
    SUPER_ADMIN
    INSTITUTION_ADMIN
    TELECALLER
    DOCUMENT_VERIFIER
    FINANCE_TEAM
    ADMISSION_TEAM
    ADMISSION_HEAD
    STUDENT
    PARENT
}

// RBAC Models
model Permission {
    id          String   @id @default(cuid())
    name        String   @unique
    description String?
    resource    String // e.g., "users", "leads", "institutions"
    action      String // e.g., "create", "read", "update", "delete"
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    rolePermissions RolePermission[]

    @@index([resource, action])
}

model RolePermission {
    id           String   @id @default(cuid())
    role         Role
    permissionId String
    createdAt    DateTime @default(now())

    permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

    @@unique([role, permissionId])
    @@index([role])
}

model Lead {
    id         String     @id @default(cuid())
    tenantId   String
    name       String
    email      String?
    phone      String?
    source     String?
    status     LeadStatus @default(NEW)
    score      Int        @default(0)
    assigneeId String?
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt

    tenant            Tenant             @relation(fields: [tenantId], references: [id])
    assignee          User?              @relation("LeadAssignee", fields: [assigneeId], references: [id])
    notes             LeadNote[]
    application       Application?
    callLogs          CallLog[]
    followUpReminders FollowUpReminder[]
}

enum LeadStatus {
    NEW
    CONTACTED
    QUALIFIED
    INTERESTED
    APPLICATION_STARTED
    DOCUMENTS_SUBMITTED
    UNDER_REVIEW
    ADMITTED
    ENROLLED
    REJECTED
    LOST
}

model LeadNote {
    id        String   @id @default(cuid())
    leadId    String
    userId    String
    note      String
    createdAt DateTime @default(now())

    lead Lead @relation(fields: [leadId], references: [id])
    user User @relation(fields: [userId], references: [id])
}

model Form {
    id                       String    @id @default(cuid())
    tenantId                 String
    title                    String
    description              String?
    isActive                 Boolean   @default(false)
    isPublished              Boolean   @default(false)
    requiresPayment          Boolean   @default(false)
    paymentAmount            Int?
    allowMultipleSubmissions Boolean   @default(false)
    maxSubmissions           Int?
    submissionDeadline       DateTime?
    settings                 Json // FormSettings
    createdAt                DateTime  @default(now())
    updatedAt                DateTime  @updatedAt

    tenant      Tenant           @relation(fields: [tenantId], references: [id])
    fields      FormField[]
    steps       FormStep[]
    submissions FormSubmission[]
    widgets     FormWidget[]
    analytics   FormAnalytics[]
}

model FormField {
    id               String  @id @default(cuid())
    formId           String
    type             String // FieldType enum
    label            String
    placeholder      String?
    description      String?
    required         Boolean @default(false)
    order            Int
    width            String  @default("full") // full, half, third, quarter
    validation       Json? // FieldValidation
    conditionalLogic Json? // ConditionalLogic
    options          Json? // FieldOptions
    styling          Json? // FieldStyling
    advanced         Json? // FieldAdvanced

    form Form @relation(fields: [formId], references: [id], onDelete: Cascade)
}

model FormStep {
    id            String   @id @default(cuid())
    formId        String
    title         String
    description   String?
    order         Int
    isActive      Boolean  @default(true)
    isPayment     Boolean  @default(false)
    paymentAmount Int?
    fields        Json // Array of field IDs
    conditions    Json? // ConditionalLogic
    settings      Json // StepSettings
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    form Form @relation(fields: [formId], references: [id], onDelete: Cascade)
}

model FormSubmission {
    id        String   @id @default(cuid())
    formId    String
    data      Json // Record<string, FormSubmissionValue>
    metadata  Json // SubmissionMetadata
    status    String   @default("submitted") // SubmissionStatus
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    form    Form     @relation(fields: [formId], references: [id])
    payment Payment? @relation("SubmissionPayment")
}

model FormWidget {
    id        String   @id @default(cuid())
    formId    String
    name      String
    type      String // WidgetType enum
    settings  Json // WidgetSettings
    embedCode String
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    form Form @relation(fields: [formId], references: [id], onDelete: Cascade)
}

model FormTemplate {
    id           String   @id @default(cuid())
    name         String
    description  String
    category     String // FormCategory enum
    isPublic     Boolean  @default(false)
    isPremium    Boolean  @default(false)
    formConfig   Json // FormBuilderConfig
    fields       Json // FormField[]
    steps        Json // FormStep[]
    previewImage String?
    tags         Json // string[]
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model FormAnalytics {
    id                String   @id @default(cuid())
    formId            String
    date              DateTime
    views             Int      @default(0)
    submissions       Int      @default(0)
    conversions       Int      @default(0)
    bounceRate        Float    @default(0)
    avgCompletionTime Float    @default(0)
    deviceBreakdown   Json // DeviceMetric[]
    sourceBreakdown   Json // SourceMetric[]
    fieldAnalytics    Json // FieldAnalytic[]
    createdAt         DateTime @default(now())

    form Form @relation(fields: [formId], references: [id], onDelete: Cascade)

    @@unique([formId, date])
    @@index([formId])
    @@index([date])
}

model Payment {
    id                   String   @id @default(cuid())
    tenantId             String
    applicationId        String?  @unique
    submissionId         String?  @unique
    gateway              String   @default("cashfree")
    amount               Int
    platformFee          Int      @default(50) // â‚¹50 platform fee
    institutionAmount    Int // Amount after platform fee deduction
    status               String   @default("CREATED")
    gatewayTransactionId String?
    gatewayResponse      Json?
    raw                  Json?
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt

    tenant      Tenant          @relation(fields: [tenantId], references: [id])
    application Application?    @relation("ApplicationPayment", fields: [applicationId], references: [id])
    submission  FormSubmission? @relation("SubmissionPayment", fields: [submissionId], references: [id])
}

model RefreshToken {
    id        String   @id @default(cuid())
    userId    String
    tokenHash String
    revoked   Boolean  @default(false)
    createdAt DateTime @default(now())
    expiresAt DateTime

    user User @relation(fields: [userId], references: [id])

    @@index([userId])
}

// Application Management Models
model Application {
    id           String            @id @default(cuid())
    tenantId     String
    leadId       String?           @unique
    studentName  String
    studentEmail String?
    studentPhone String?
    parentName   String?
    parentEmail  String?
    parentPhone  String?
    course       String?
    status       ApplicationStatus @default(SUBMITTED)
    assigneeId   String?
    submittedAt  DateTime          @default(now())
    updatedAt    DateTime          @updatedAt

    tenant       Tenant        @relation(fields: [tenantId], references: [id])
    lead         Lead?         @relation(fields: [leadId], references: [id])
    assignee     User?         @relation("ApplicationAssignee", fields: [assigneeId], references: [id])
    documents    Document[]
    payments     Payment[]     @relation("ApplicationPayment")
    appointments Appointment[]
}

enum ApplicationStatus {
    SUBMITTED
    UNDER_REVIEW
    DOCUMENTS_PENDING
    DOCUMENTS_VERIFIED
    PAYMENT_PENDING
    PAYMENT_COMPLETED
    ADMITTED
    REJECTED
    ENROLLED
}

// Document Management Models
model Document {
    id              String         @id @default(cuid())
    tenantId        String
    applicationId   String?
    fileName        String
    filePath        String
    fileType        String
    fileSize        Int
    status          DocumentStatus @default(UPLOADED)
    verifierId      String?
    verifiedAt      DateTime?
    rejectedAt      DateTime?
    rejectionReason String?
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt

    tenant      Tenant       @relation(fields: [tenantId], references: [id])
    application Application? @relation(fields: [applicationId], references: [id])
    verifier    User?        @relation("DocumentVerifier", fields: [verifierId], references: [id])
}

enum DocumentStatus {
    UPLOADED
    UNDER_REVIEW
    VERIFIED
    REJECTED
    RESUBMITTED
}

// Communication Models
model Communication {
    id          String              @id @default(cuid())
    tenantId    String
    senderId    String
    recipient   String
    type        CommunicationType
    subject     String?
    content     String
    status      CommunicationStatus @default(SENT)
    sentAt      DateTime            @default(now())
    deliveredAt DateTime?
    readAt      DateTime?

    tenant Tenant @relation(fields: [tenantId], references: [id])
    sender User   @relation("CommunicationSender", fields: [senderId], references: [id])
}

enum CommunicationType {
    EMAIL
    SMS
    WHATSAPP
    CALL
    NOTIFICATION
}

enum CommunicationStatus {
    SENT
    DELIVERED
    READ
    FAILED
    BOUNCED
}

// Email Template Models
model EmailTemplate {
    id          String   @id @default(cuid())
    tenantId    String
    name        String
    subject     String
    htmlContent String
    textContent String?
    variables   Json // Dynamic variables schema
    category    String   @default("GENERAL") // GENERAL, LEAD, PAYMENT, NOTIFICATION, etc.
    isActive    Boolean  @default(true)
    isSystem    Boolean  @default(false) // System templates cannot be deleted
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    tenant Tenant @relation(fields: [tenantId], references: [id])

    @@index([tenantId])
    @@index([category])
    @@index([isActive])
}

// Notification Preferences
model NotificationPreference {
    id              String   @id @default(cuid())
    tenantId        String
    userId          String
    emailEnabled    Boolean  @default(true)
    smsEnabled      Boolean  @default(false)
    whatsappEnabled Boolean  @default(false)
    pushEnabled     Boolean  @default(true)
    frequency       String   @default("IMMEDIATE") // IMMEDIATE, DAILY, WEEKLY
    categories      Json // Notification categories preferences
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    tenant Tenant @relation(fields: [tenantId], references: [id])
    user   User   @relation("NotificationPreference", fields: [userId], references: [id])

    @@unique([tenantId, userId])
    @@index([tenantId])
    @@index([userId])
}

// Email Queue for Redis-based processing
model EmailQueue {
    id           String    @id @default(cuid())
    tenantId     String
    to           String
    subject      String
    htmlContent  String
    textContent  String?
    variables    Json?
    priority     Int       @default(0) // Higher number = higher priority
    status       String    @default("PENDING") // PENDING, PROCESSING, SENT, FAILED
    attempts     Int       @default(0)
    maxAttempts  Int       @default(3)
    scheduledAt  DateTime  @default(now())
    processedAt  DateTime?
    errorMessage String?
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt

    tenant Tenant @relation(fields: [tenantId], references: [id])

    @@index([tenantId])
    @@index([status])
    @@index([scheduledAt])
    @@index([priority])
}

// Notification model
model Notification {
    id        String   @id @default(cuid())
    tenantId  String
    userId    String
    title     String
    message   String
    type      String   @default("INFO") // INFO, SUCCESS, WARNING, ERROR, SYSTEM
    category  String   @default("GENERAL")
    data      Json?
    read      Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    tenant Tenant @relation(fields: [tenantId], references: [id])
    user   User   @relation("NotificationUser", fields: [userId], references: [id])

    @@index([tenantId])
    @@index([userId])
    @@index([read])
    @@index([createdAt])
}

// Audit and Activity Logging
model AuditLog {
    id        String   @id @default(cuid())
    tenantId  String
    userId    String?
    action    String
    entity    String
    entityId  String
    oldValues Json?
    newValues Json?
    ipAddress String?
    userAgent String?
    createdAt DateTime @default(now())

    tenant Tenant @relation(fields: [tenantId], references: [id])
    user   User?  @relation("AuditLogUser", fields: [userId], references: [id])

    @@index([tenantId])
    @@index([userId])
    @@index([entity, entityId])
}

// Fee Management Models
model FeeStructure {
    id          String   @id @default(cuid())
    tenantId    String
    name        String
    description String?
    components  Json // Array of fee components
    isActive    Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    tenant Tenant @relation(fields: [tenantId], references: [id])
}

// Subscription Management
model Subscription {
    id            String             @id @default(cuid())
    tenantId      String
    tier          SubscriptionTier
    status        SubscriptionStatus
    startDate     DateTime
    endDate       DateTime
    amount        Int
    paymentStatus PaymentStatus      @default(PENDING)
    createdAt     DateTime           @default(now())
    updatedAt     DateTime           @updatedAt

    tenant Tenant @relation(fields: [tenantId], references: [id])
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
    REFUNDED
}

// Appointment Scheduling
model Appointment {
    id            String            @id @default(cuid())
    tenantId      String
    applicationId String?
    assigneeId    String
    studentName   String
    studentEmail  String?
    studentPhone  String?
    scheduledAt   DateTime
    duration      Int               @default(30) // minutes
    status        AppointmentStatus @default(SCHEDULED)
    notes         String?
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @updatedAt

    tenant      Tenant       @relation(fields: [tenantId], references: [id])
    application Application? @relation(fields: [applicationId], references: [id])
    assignee    User         @relation("AppointmentAssignee", fields: [assigneeId], references: [id])
}

enum AppointmentStatus {
    SCHEDULED
    CONFIRMED
    COMPLETED
    CANCELLED
    NO_SHOW
}

// Performance Tracking
model PerformanceLog {
    id         String   @id @default(cuid())
    userId     String
    metric     String
    value      Float
    period     String // daily, weekly, monthly
    periodDate DateTime
    createdAt  DateTime @default(now())

    user User @relation(fields: [userId], references: [id])

    @@index([userId])
    @@index([period, periodDate])
}

// Asset Management Model
model Asset {
    id         String   @id @default(cuid())
    tenantId   String
    publicId   String   @unique
    fileName   String
    fileType   String
    fileSize   Int
    secureUrl  String
    format     String
    width      Int?
    height     Int?
    bytes      Int
    folder     String
    tags       String
    context    Json
    uploadedBy String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    tenant   Tenant @relation(fields: [tenantId], references: [id])
    uploader User   @relation("AssetUploader", fields: [uploadedBy], references: [id])

    @@index([tenantId])
    @@index([uploadedBy])
    @@index([folder])
}

// Call Logging Models
model CallLog {
    id           String       @id @default(cuid())
    tenantId     String
    leadId       String
    telecallerId String
    callType     CallType     @default(OUTBOUND)
    status       CallStatus   @default(INITIATED)
    duration     Int? // in seconds
    outcome      CallOutcome?
    notes        String?
    recordingUrl String?
    recordingId  String?
    scheduledAt  DateTime?
    startedAt    DateTime?
    endedAt      DateTime?
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt

    tenant     Tenant @relation(fields: [tenantId], references: [id])
    lead       Lead   @relation(fields: [leadId], references: [id])
    telecaller User   @relation("CallLogTelecaller", fields: [telecallerId], references: [id])

    @@index([tenantId])
    @@index([leadId])
    @@index([telecallerId])
    @@index([status])
    @@index([createdAt])
}

enum CallType {
    INBOUND
    OUTBOUND
    FOLLOW_UP
    SCHEDULED
}

enum CallStatus {
    INITIATED
    RINGING
    ANSWERED
    BUSY
    NO_ANSWER
    FAILED
    COMPLETED
    CANCELLED
}

enum CallOutcome {
    SUCCESSFUL
    NO_ANSWER
    BUSY
    WRONG_NUMBER
    NOT_INTERESTED
    CALLBACK_REQUESTED
    INTERESTED
    QUALIFIED
    NOT_QUALIFIED
    FOLLOW_UP_SCHEDULED
}

// Telecaller Performance Models
model TelecallerPerformance {
    id              String   @id @default(cuid())
    tenantId        String
    telecallerId    String
    date            DateTime
    callsMade       Int      @default(0)
    callsAnswered   Int      @default(0)
    callsConverted  Int      @default(0)
    totalDuration   Int      @default(0) // in seconds
    avgCallDuration Float    @default(0)
    conversionRate  Float    @default(0)
    responseRate    Float    @default(0)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    tenant     Tenant @relation(fields: [tenantId], references: [id])
    telecaller User   @relation("TelecallerPerformance", fields: [telecallerId], references: [id])

    @@unique([tenantId, telecallerId, date])
    @@index([tenantId])
    @@index([telecallerId])
    @@index([date])
}

// Follow-up Reminder Models
model FollowUpReminder {
    id           String           @id @default(cuid())
    tenantId     String
    leadId       String
    telecallerId String
    type         FollowUpType
    priority     FollowUpPriority @default(MEDIUM)
    scheduledAt  DateTime
    status       FollowUpStatus   @default(PENDING)
    notes        String?
    completedAt  DateTime?
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @updatedAt

    tenant     Tenant @relation(fields: [tenantId], references: [id])
    lead       Lead   @relation(fields: [leadId], references: [id])
    telecaller User   @relation("FollowUpReminderTelecaller", fields: [telecallerId], references: [id])

    @@index([tenantId])
    @@index([leadId])
    @@index([telecallerId])
    @@index([scheduledAt])
    @@index([status])
}

enum FollowUpType {
    CALL
    EMAIL
    SMS
    WHATSAPP
    MEETING
}

enum FollowUpPriority {
    LOW
    MEDIUM
    HIGH
    URGENT
}

enum FollowUpStatus {
    PENDING
    COMPLETED
    CANCELLED
    OVERDUE
}
